// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Time(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeReply, error)
	InsertThing(ctx context.Context, in *Thing, opts ...grpc.CallOption) (*ThingId, error)
	GetThing(ctx context.Context, in *ThingId, opts ...grpc.CallOption) (*Thing, error)
	ListThings(ctx context.Context, in *ListThingsRequest, opts ...grpc.CallOption) (Service_ListThingsClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Time(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeReply, error) {
	out := new(TimeReply)
	err := c.cc.Invoke(ctx, "/service.Service/Time", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) InsertThing(ctx context.Context, in *Thing, opts ...grpc.CallOption) (*ThingId, error) {
	out := new(ThingId)
	err := c.cc.Invoke(ctx, "/service.Service/InsertThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetThing(ctx context.Context, in *ThingId, opts ...grpc.CallOption) (*Thing, error) {
	out := new(Thing)
	err := c.cc.Invoke(ctx, "/service.Service/GetThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListThings(ctx context.Context, in *ListThingsRequest, opts ...grpc.CallOption) (Service_ListThingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/service.Service/ListThings", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceListThingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_ListThingsClient interface {
	Recv() (*Thing, error)
	grpc.ClientStream
}

type serviceListThingsClient struct {
	grpc.ClientStream
}

func (x *serviceListThingsClient) Recv() (*Thing, error) {
	m := new(Thing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Time(context.Context, *TimeRequest) (*TimeReply, error)
	InsertThing(context.Context, *Thing) (*ThingId, error)
	GetThing(context.Context, *ThingId) (*Thing, error)
	ListThings(*ListThingsRequest, Service_ListThingsServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Time(context.Context, *TimeRequest) (*TimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Time not implemented")
}
func (*UnimplementedServiceServer) InsertThing(context.Context, *Thing) (*ThingId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertThing not implemented")
}
func (*UnimplementedServiceServer) GetThing(context.Context, *ThingId) (*Thing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThing not implemented")
}
func (*UnimplementedServiceServer) ListThings(*ListThingsRequest, Service_ListThingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListThings not implemented")
}
func (*UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Time_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Time(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/Time",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Time(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_InsertThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).InsertThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/InsertThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).InsertThing(ctx, req.(*Thing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThingId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/GetThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetThing(ctx, req.(*ThingId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListThings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListThingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ListThings(m, &serviceListThingsServer{stream})
}

type Service_ListThingsServer interface {
	Send(*Thing) error
	grpc.ServerStream
}

type serviceListThingsServer struct {
	grpc.ServerStream
}

func (x *serviceListThingsServer) Send(m *Thing) error {
	return x.ServerStream.SendMsg(m)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Time",
			Handler:    _Service_Time_Handler,
		},
		{
			MethodName: "InsertThing",
			Handler:    _Service_InsertThing_Handler,
		},
		{
			MethodName: "GetThing",
			Handler:    _Service_GetThing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListThings",
			Handler:       _Service_ListThings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/service.proto",
}
