// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	SetScore(ctx context.Context, in *PlayerScore, opts ...grpc.CallOption) (*SetScoreReply, error)
	GetScores(ctx context.Context, in *GetScoresRequest, opts ...grpc.CallOption) (Service_GetScoresClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) SetScore(ctx context.Context, in *PlayerScore, opts ...grpc.CallOption) (*SetScoreReply, error) {
	out := new(SetScoreReply)
	err := c.cc.Invoke(ctx, "/service.Service/SetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetScores(ctx context.Context, in *GetScoresRequest, opts ...grpc.CallOption) (Service_GetScoresClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/service.Service/GetScores", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceGetScoresClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_GetScoresClient interface {
	Recv() (*PlayerScore, error)
	grpc.ClientStream
}

type serviceGetScoresClient struct {
	grpc.ClientStream
}

func (x *serviceGetScoresClient) Recv() (*PlayerScore, error) {
	m := new(PlayerScore)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	SetScore(context.Context, *PlayerScore) (*SetScoreReply, error)
	GetScores(*GetScoresRequest, Service_GetScoresServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) SetScore(context.Context, *PlayerScore) (*SetScoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScore not implemented")
}
func (*UnimplementedServiceServer) GetScores(*GetScoresRequest, Service_GetScoresServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScores not implemented")
}
func (*UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_SetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/SetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SetScore(ctx, req.(*PlayerScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetScores_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetScoresRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).GetScores(m, &serviceGetScoresServer{stream})
}

type Service_GetScoresServer interface {
	Send(*PlayerScore) error
	grpc.ServerStream
}

type serviceGetScoresServer struct {
	grpc.ServerStream
}

func (x *serviceGetScoresServer) Send(m *PlayerScore) error {
	return x.ServerStream.SendMsg(m)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetScore",
			Handler:    _Service_SetScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetScores",
			Handler:       _Service_GetScores_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/service.proto",
}
